version: '3.8'

services:
  postgres_db:
    image: postgres:latest
    container_name: postgres_container
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DATABASE_PORT_DOCKER}:${DATABASE_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app_network

  redis_db:
    image: redis:latest
    container_name: redis_container
    env_file:
      - .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:${REDIS_PORT}"
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app_network
  api-seeder:
    container_name: api_seeder_container
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "echo '--- Iniciando Migrações e Seeds da API ---' &&
             pnpm run db:deploy &&
             npx prisma generate &&
             pnpm run db:seed &&
             echo '--- Migrações e Seeds da API concluídas com sucesso! ---'"

  api:
    container_name: api_container
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env
    environment:
      - API_HOST=${API_HOST}
    depends_on:
      api-seeder:
        condition: service_completed_successfully
    networks:
      - app_network
    command: >
      sh -c "npx prisma generate && pnpm run start:dev"
    volumes:
      - ./api:/usr/src/app
      - /usr/src/app/node_modules
    restart: always

  infra:
    container_name: infra_container
    build:
      context: ./infra
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      api-seeder:
        condition: service_completed_successfully
      api:
        condition: service_started
    networks:
      - app_network
    restart: on-failure
    command: sh -c "uv run task dev"

  adminer:
    image: adminer
    container_name: adminer_container
    ports:
      - "${ADMINER_PORT}:8080"
    networks:
      - app_network
    restart: always

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge